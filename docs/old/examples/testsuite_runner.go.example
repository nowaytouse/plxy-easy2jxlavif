package main

import (
	"flag"
	"fmt"
	"os"
	"time"

	"go.uber.org/zap"

	"pixly/pkg/testsuite"
)

func main() {
	var (
		scenarioFile = flag.String("scenarios", "test_scenarios.json", "测试场景配置文件路径")
		configFile   = flag.String("config", "", "配置文件路径")
		outputFile   = flag.String("output", "", "测试报告输出路径")
		verbose      = flag.Bool("verbose", false, "启用详细日志")
		scenarioID   = flag.String("scenario", "", "运行指定的测试场景ID")
	)
	flag.Parse()

	// 初始化日志
	var logger *zap.Logger
	var err error
	
	if *verbose {
		logger, err = zap.NewDevelopment()
	} else {
		logger, err = zap.NewProduction()
	}
	
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to initialize logger: %v\n", err)
		os.Exit(1)
	}
	defer logger.Sync()

	// 创建测试套件
	testSuite, err := testsuite.NewTestSuite(*configFile, logger)
	if err != nil {
		logger.Fatal("Failed to create test suite", zap.Error(err))
	}

	// 加载测试场景
	if err := testSuite.LoadScenariosFromFile(*scenarioFile); err != nil {
		logger.Fatal("Failed to load scenarios", zap.Error(err))
	}

	logger.Info("底层通用测试套件启动", 
		zap.String("scenarios_file", *scenarioFile),
		zap.Bool("verbose", *verbose))

	// 运行测试
	if *scenarioID != "" {
		// 运行指定场景
		if err := runSingleScenario(testSuite, *scenarioID, logger); err != nil {
			logger.Fatal("Scenario execution failed", zap.Error(err))
		}
	} else {
		// 运行所有场景
		if err := testSuite.RunAllScenarios(); err != nil {
			logger.Fatal("Test suite execution failed", zap.Error(err))
		}
	}

	// 生成报告
	report := testSuite.GenerateReport()
	
	// 输出报告
	var reportPath string
	if *outputFile != "" {
		reportPath = *outputFile
	} else {
		// 使用默认的reports/test目录
		if err := os.MkdirAll("reports/test", 0755); err != nil {
			logger.Error("Failed to create reports/test directory", zap.Error(err))
		} else {
			timestamp := time.Now().Format("20060102_150405")
			reportPath = "reports/test/test_results_" + timestamp + ".json"
		}
	}
	
	if reportPath != "" {
		if err := testSuite.SaveReport(report, reportPath); err != nil {
			logger.Error("Failed to save report", zap.Error(err))
		}
	}

	// 打印摘要
	printSummary(report, logger)
	
	// 根据测试结果设置退出码
	if report.FailedScenarios > 0 {
		os.Exit(1)
	}
}

func runSingleScenario(testSuite *testsuite.TestSuite, scenarioID string, logger *zap.Logger) error {
	logger.Info("Running single scenario", zap.String("id", scenarioID))
	
	// 查找指定的测试场景
	var targetScenario *testsuite.TestScenario
	for _, scenario := range testSuite.Scenarios() {
		if scenario.ID == scenarioID {
			targetScenario = scenario
			break
		}
	}
	
	if targetScenario == nil {
		return fmt.Errorf("scenario not found: %s", scenarioID)
	}
	
	// 执行单个场景
	result, err := testSuite.RunScenario(targetScenario)
	if err != nil {
		return fmt.Errorf("scenario execution failed: %w", err)
	}
	
	// 输出单个场景的结果
	status := "✅"
	if !result.Success {
		status = "❌"
	}
	
	fmt.Printf("\n=== 📊 单个场景执行结果 ===\n")
	fmt.Printf("%s %s (处理:%d, 成功:%d, 失败:%d, 跳过:%d)\n",
		status, targetScenario.Name,
		result.FilesProcessed, result.FilesSuccessful,
		result.FilesFailed, result.FilesSkipped)
	
	if len(result.Issues) > 0 {
		fmt.Printf("⚠️  问题:\n")
		for _, issue := range result.Issues {
			fmt.Printf("    - %s\n", issue)
		}
	}
	
	if result.QualityAnalysis != nil {
		fmt.Printf("🔍 质量检测: 工作中=%t, 检测质量=%v, 损坏文件=%d\n",
			result.QualityAnalysis.QualityEngineWorking,
			result.QualityAnalysis.DetectedQualities,
			result.QualityAnalysis.CorruptedFiles)
	}
	
	return nil
}

func printSummary(report *testsuite.TestReport, logger *zap.Logger) {
	fmt.Printf("\n")
	fmt.Printf("=== 📊 测试套件执行结果 ===\n")
	fmt.Printf("执行时间: %s\n", report.Timestamp.Format(time.RFC3339))
	fmt.Printf("总场景数: %d\n", report.TotalScenarios)
	fmt.Printf("通过场景: %d\n", report.PassedScenarios)
	fmt.Printf("失败场景: %d\n", report.FailedScenarios)
	fmt.Printf("成功率: %.1f%%\n", float64(report.PassedScenarios)/float64(report.TotalScenarios)*100)
	
	if len(report.Summary.QualityEngineIssues) > 0 {
		fmt.Printf("\n🚨 质量检测引擎问题:\n")
		for _, issue := range report.Summary.QualityEngineIssues {
			fmt.Printf("  - %s\n", issue)
		}
	}
	
	if len(report.Summary.ConversionIssues) > 0 {
		fmt.Printf("\n⚠️  转换问题:\n")
		for _, issue := range report.Summary.ConversionIssues {
			fmt.Printf("  - %s\n", issue)
		}
	}

	// 详细结果
	fmt.Printf("\n📋 详细结果:\n")
	for _, result := range report.Results {
		status := "✅"
		if !result.Success {
			status = "❌"
		}
		
		fmt.Printf("%s %s (处理:%d, 成功:%d, 失败:%d, 跳过:%d)\n",
			status, result.ScenarioID, 
			result.FilesProcessed, result.FilesSuccessful, 
			result.FilesFailed, result.FilesSkipped)
			
		if len(result.Issues) > 0 {
			for _, issue := range result.Issues {
				fmt.Printf("    ⚠️  %s\n", issue)
			}
		}
		
		// 显示质量分析结果
		if result.QualityAnalysis != nil {
			fmt.Printf("    🔍 质量检测: 工作中=%t, 检测质量=%v, 损坏文件=%d\n",
				result.QualityAnalysis.QualityEngineWorking,
				result.QualityAnalysis.DetectedQualities,
				result.QualityAnalysis.CorruptedFiles)
		}
	}
	
	fmt.Printf("\n")
}